%%% DATA INPUT
%% Controller values
Gs=1; % Sensor Gain
Ga=3; % Actuator
Gr=1; % Prefilter ( reference generator )
Gd=1; % Plant disturbance

Kd=2; % Proportion between input and output

%% Create signal input structs
% coefficient: signal input value
% maxError: max output error
% type: 0 for none, 1 for polynomial, 2 for sinusoidal
% frequency: only for sinusoidal signals in rad/sec. 0 for all others
% order: only for polynomial signals. -10 for all others
% tf: equal to input signal transfer function or gain block
% on: must be initialized to 1

r= struct('coefficient', 1 ...
        , 'maxError', 1.5*10^(-1) ...
        , 'actualError', -1000 ...
        , 'type', 0 ...
        , 'frequency', 0 ...
        , 'order', 0 ...
        , 'tf', Gr ...
        , 'on', 1 ...
        );
da= struct('coefficient', 8.5*10^(-3) ...
        , 'maxError', 25*10^(-3) ...
        , 'actualError', -1000 ...
        , 'type', 1 ...
        , 'frequency', 0 ...
        , 'order', 0 ...
        , 'tf', 1 ...
        , 'on', 1 ...
        );
dp= struct('coefficient', 6*10^(-2) ...
        , 'maxError', 6*10^(-4) ...
        , 'actualError', -1000 ...
        , 'type', 2 ...
        , 'frequency', 10 ...
        , 'order', -10 ...
        , 'tf', Gd ...
        , 'on', 1 ...
        );
ds= struct('coefficient', 1*10^(-3) ...
        , 'maxError', 1*10^(-4) ...
        , 'actualError', -1000 ...
        , 'type', 2 ...
        , 'frequency', 10000 ...
        , 'order', -10 ...
        , 'tf', 1 ...
        , 'on', 1 ...
        );

%% Time-Domain Performance Specifications
% rise_time_on=1;
% overshoot_on=1;
% settling_time_on=0;
% 
% rise_time=5e-3; % Max Rise time in seconds tr
% overshoot=0.08; % Max overshoot from a step response (s^)
% settling_time=12; % Max time with which an input must be settled
% settling_time_tolerance=0.05; % DECIMAL Tolerance defining distance of value from Yss at which a function is considered settled. ( alpha)

riseTime.on=1;
riseTime.maxValue=5e-3;

overshoot.on=1;
overshoot.maxValue=0.08;

settlingTime.on=0;
settlingTime.maxValue=12;
settlingTime.tolerance=0.05;

%% Plant Values

% % Number of uncertain coefficients
% nGp_coeffs=2;

% % Coefficient 1 range (set to 0 if it doesn't exist)
% Gp_coeff1_low=0.8;
% Gp_coeff1_high=1.2;
% 
% % Coefficient 2 range (set to 0 if it doesn't exist)
% Gp_coeff2_low=420;
% Gp_coeff2_high=580;
% 
% % Coefficient 3 range (set to 0 if it doesn't exist)
% Gp_coeff3_low=0;
% Gp_coeff3_high=0;

% % Plant transfer function string for further processing
% Gp_string='(10e6*Gp_coeff1)/((s^2 + Gp_coeff2*s))';
% 
% % Gp poles at s=0
% nGp_poles=1;

Gp.nCoefficients=2;
Gp.nOriginPoles=1;
Gp.inputString='(10e6*coeff1)/((s^2 + coeff2*s))';
Gp.coeffecient(1)=struct('low', 0.8 ...
                ,'high', 1.2 );
Gp.coeffecient(2)=struct('low', 420 ...
                ,'high', 580 );
            


